name: PR Manager
on:
  pull_request:
    types:
      - opened
      - reopened
      - labeled
      - unlabeled
      - edited
      - synchronize

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PR_URL: ${{github.event.pull_request.html_url}}
  # Labels
  LABEL_DEVELOPMENT: "dependencies:development"
  LABEL_PRODUCTION: "dependencies:production"
  LABEL_SEMVER_DEFAULT: "semver:patch"

permissions:
  pull-requests: write

jobs:
  pre-commit-ci:
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.login == 'pre-commit-ci[bot]'
    steps:
      - name: Add semver:patch label
        id: label-maintenance
        run: gh pr edit "${{env.PR_URL}}" --add-label "maintenance"

      - name: Assign owner
        id: assign-owner
        run: gh pr edit "${{env.PR_URL}}" --add-assignee "${{ github.repository_owner }}"

  dependabot:
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.login == 'dependabot[bot]'
    steps:
      - name: Get Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Print Metadata
        run: |
          echo ${{ steps.metadata.outputs.package-ecosystem }}
          echo ${{ steps.metadata.outputs.dependency-type }}

      # Semver Label
      - name: Add semver:patch label
        id: label-semver-patch
        run: gh pr edit "${{env.PR_URL}}" --add-label "${{env.LABEL_SEMVER_DEFAULT}}"

      # Python Dependencies
      - name: Determine if development or production
        id: determine-python-label
        if: steps.metadata.outputs.package-ecosystem == 'pip'
        # Check if the github ref contains 'development', or
        # Ruff, mypy, pytest, which are development dependencies,
        # but they are not in the development-dependencies group
        run: |
          if [[ ${{ github.head_ref }} == *dependabot/pip/development-dependencies* ]]; then
            echo "py-dep-type=development" >> "$GITHUB_OUTPUT"
          elif [[ ${{ github.head_ref }} =~ ^.*\/(ruff|mypy|pytest)-.*$ ]]; then
            echo "py-dep-type=development" >> "$GITHUB_OUTPUT"
            echo "py-dep-type=development" >> "$GITHUB_OUTPUT"
          else
            echo "py-dep-type=production" >> "$GITHUB_OUTPUT"
          fi

      - name: Python Production
        id: label-python-production
        if: steps.metadata.outputs.package-ecosystem == 'pip' && steps.determine-python-label.outputs.py-dep-type == 'production'
        run: gh pr edit "${{env.PR_URL}}" --add-label "${{env.LABEL_PRODUCTION}}"

      - name: Python Development
        id: label-python-development
        if: steps.metadata.outputs.package-ecosystem == 'pip' && steps.determine-python-label.outputs.py-dep-type == 'development'
        run: gh pr edit "${{env.PR_URL}}" --add-label "${{env.LABEL_DEVELOPMENT}}"

      # GitHub Actions Dependencies
      - name: GitHub Actions
        id: label-github-actions
        if: steps.metadata.outputs.package-ecosystem == 'github-actions'
        run: gh pr edit "${{env.PR_URL}}" --add-label "${{env.LABEL_DEVELOPMENT}}"

  renovate:
    runs-on: ubuntu-latest
    if: github.event.pull_request.user.login == 'renovate[bot]'
    steps:
      - name: Label Lock file maintenance
        id: label-lock-file-maintenance
        # Only run if the PR title contains "Lock file"
        if: contains(github.event.pull_request.title, 'Lock file')
        run: gh pr edit "${{env.PR_URL}}" --add-label "semver:patch"

  check-labels:
    # This job should run, even if the previous jobs failed or were skipped,
    # but MUST run after them, if they are not skipped.
    runs-on: ubuntu-latest
    needs:
      - pre-commit-ci
      - dependabot
      - renovate
    if: ${{ ! cancelled() }}
    steps:
      - name: Check semver label
        id: semver_label_check
        uses: agilepathway/label-checker@v1.6.60
        # Ignore documentation and repository maintenance PRs, as they are should not bump the semver
        if: ${{!contains(github.event.pull_request.labels.*.name, 'documentation') && !contains(github.event.pull_request.labels.*.name, 'maintenance')}}
        with:
          prefix_mode: true
          one_of: "semver:"
          repo_token: ${{ secrets.GITHUB_TOKEN }}
