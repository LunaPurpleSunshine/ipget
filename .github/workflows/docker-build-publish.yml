name: Build & Publish Docker Image

on:
  push:
    tags:
      - "v*.*.*"
      - "v*.*.*-alpha.*"
      - "v*.*.*-beta.*"
      - "v*.*.*-rc.*"
  # Run build manually from the Actions tab, will be tagged with branch name
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

permissions: {}

jobs:
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Get repo, python, and poetry
      - name: Checkout the repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.6.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Generate requirements.txt
        run: poetry export --only main -f requirements.txt -o requirements.txt

      - name: lowercase repository name
        id: imagename
        uses: Entepotenz/change-string-case-action-min-dependencies@v1
        with:
          string: ${{ env.IMAGE_NAME }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.imagename.outputs.lowercase }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}

      - name: Build test image
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          load: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ env.REGISTRY }}/${{ steps.imagename.outputs.lowercase }}:build-test

      - name: Basic image test
        id: test_container
        run: |
          sudo docker run --user root \
            -e "IPGET_LOG_LEVEL=DEBUG" \
            -e "IPGET_DB_TYPE=SQLite" \
            -e "IPGET_SQLITE_DATABASE=:memory:" \
            ${{ env.REGISTRY }}/${{ steps.imagename.outputs.lowercase }}:build-test

      - name: GitHub Container Registry Login
        uses: docker/login-action@v3
        with:
          registry: ${{env.REGISTRY}}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push all platforms
        id: docker_tag_semver
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          labels: |
            ${{ steps.meta.outputs.labels }}
            "org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}"
            "org.opencontainers.image.description=Gets public ip and writes to a database. Optionally notifies on change, and pings healthchecks.io"
            "org.opencontainers.image.licenses=MIT"
          tags: ${{ steps.meta.outputs.tags }}

      - name: Push alpha/beta/rc with :dev tag
        id: docker_tag_dev
        uses: docker/build-push-action@v5
        if: contains(github.ref_name, '-alpha.') || contains(github.ref_name, '-beta.')
        with:
          context: .
          platforms: linux/amd64, linux/arm64
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ env.REGISTRY }}/${{ steps.imagename.outputs.lowercase }}:dev
