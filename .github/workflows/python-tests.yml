name: Python Checks
on:
  pull_request:
    types:
      - opened
      - reopened
      - edited
      - synchronize
  push:
    branches:
      - master

jobs:
  ruff:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      # Get repo, python, and poetry
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.6.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Load cached venv if cache exists, else install with poetry
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Poetry install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with dev --no-interaction --no-root

      - name: Linter
        # Update output format to enable automatic inline annotations.
        run: ruff check --output-format=github src/ tests/

      - name: Formatter
        run: ruff format --diff src/ tests/

  pytest:
    runs-on: ubuntu-latest
    permissions: {}
    steps:
      # Get repo, python, and poetry
      - name: Checkout Repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        id: setup-python
        with:
          python-version: "3.11"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.6.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      # Load cached venv if cache exists, else install with poetry
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Poetry install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --with dev --no-interaction --no-root

      # Run python tests
      - name: Run pytest
        uses: pavelzw/pytest-action@v2.2.0
        with:
          custom-pytest: poetry run pytest
          custom-arguments: -r a
          report-title: Pytest Report
          click-to-expand: true
          verbose: true
          emoji: true
        env:
          IPGET_TEST_HEALTHCHECK_SERVER: ${{secrets.PYTEST_IPGET_HEALTHCHECK_SERVER}}
          IPGET_TEST_HEALTHCHECK_UUID: ${{secrets.PYTEST_IPGET_HEALTHCHECK_UUID}}
          IPGET_TEST_DISCORD_WEBHOOK: ${{secrets.PYTEST_IPGET_DISCORD_WEBHOOK}}
