{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "docker-build :code",
			"detail": "Builds linux/amd64 docker container as lunapurplesunshine/ipget:code. Does NOT push.",
			"type": "docker-build",
			"platform": "python",
			"dockerBuild": {
				"platform": "linux/amd64", // linux/arm64,linux/arm/v6,linux/arm/v7"
				"dockerfile": "${workspaceFolder}/Dockerfile",
				"context": "${workspaceFolder}",
				"tag": "lunapurplesunshine/ipget:code-alpine",
			},
			"group": "build"
		},
		{
			"label": "docker-build :code-debian",
			"detail": "Builds linux/amd64 docker container as lunapurplesunshine/ipget:code. Does NOT push.",
			"type": "docker-build",
			"platform": "python",
			"dockerBuild": {
				"platform": "linux/amd64", // linux/arm64,linux/arm/v6,linux/arm/v7"
				"dockerfile": "${workspaceFolder}/debian.Dockerfile",
				"context": "${workspaceFolder}",
				"tag": "lunapurplesunshine/ipget:code-debian",
			},
			"group": "build"
		},
		{
			"label": "docker-run :code sqlite in memory",
			"detail": "Runs the docker container lunapurplesunshine/ipget:code for local testing in the workspace folder.",
			"dependsOn":["docker-build :code"],
			"dependsOrder": "sequence",
			"type": "docker-run",
			"dockerRun": {
				"image": "lunapurplesunshine/ipget:code",
				"containerName": "ipget-code-sqlite-memory",
				"remove": true,
				"envFiles": [
					"${workspaceFolder}/test-dotenv/test-sqlite-memory.env",
				],
				"volumes": [
					{
						"localPath": "${workspaceFolder}/test-container/",
						"containerPath": "/app",
						"permissions": "rw"
					}
				]
			},
			"group": "test"
		},
		{
			"label": "docker-run :code sqlite file",
			"detail": "Runs the docker container lunapurplesunshine/ipget:code for local sqlite (file) testing in the workspace folder.",
			"dependsOn":["docker-build :code"],
			"dependsOrder": "sequence",
			"type": "docker-run",
			"dockerRun": {
				"image": "lunapurplesunshine/ipget:code",
				"containerName": "ipget-code-sqlite-file",
				"remove": true,
				"envFiles": [
					"${workspaceFolder}/test-dotenv/test-sqlite-file.env",
				],
				"volumes": [
					{
						"localPath": "${workspaceFolder}/test-container",
						"containerPath": "/app",
						"permissions": "rw"
					}
				]
			},
			"group": "test"
		},
		{
			"label": "docker-run :code mysql",
			"detail": "Runs the docker container lunapurplesunshine/ipget:code for local MySQL testing in the workspace folder.",
			"dependsOn":["docker-build :code"],
			"dependsOrder": "sequence",
			"type": "docker-run",
			"dockerRun": {
				"image": "lunapurplesunshine/ipget:code",
				"containerName": "ipget-code-mysql",
				"remove": true,
				"envFiles": [
					"${workspaceFolder}/test-dotenv/test-mysql.env",
				],
				"volumes": [
					{
						"localPath": "${workspaceFolder}/test-container/",
						"containerPath": "/app",
						"permissions": "rw"
					}
				],
				"network": "host"
			},
			"group": "test"
		},
		{
			"label": "docker-run :code postgres",
			"detail": "Runs the docker container lunapurplesunshine/ipget:code for local PostgreSQL testing in the workspace folder.",
			"dependsOn":["docker-build :code"],
			"dependsOrder": "sequence",
			"type": "docker-run",
			"dockerRun": {
				"image": "lunapurplesunshine/ipget:code",
				"containerName": "ipget-code-postgres",
				"remove": true,
				"envFiles": [
					"${workspaceFolder}/test-dotenv/test-postgres.env",
				],
				"volumes": [
					{
						"localPath": "${workspaceFolder}/test-container/",
						"containerPath": "/app",
						"permissions": "rw"
					}
				],
				"network": "host"
			},
			"group": "test"
		},
		{
			"label": "docker-run ALL",
			"detail": "Calls the docker build and ALL docker run tasks.",
			"dependsOrder": "sequence",
			"dependsOn": [
				"docker-run :code sqlite in memory",
				"docker-run :code sqlite file",
				"docker-run :code mysql",
				"docker-run :code postgres",
			],
			"group": "test",
		},
		{
			"type": "shell",
			"label": "python-lint-ruff",
			"detail": "Lint python coder with ruff.",
			"group": "test",
			"command": "uv",
			"args": [
				"run",
				"ruff",
				"check",
				"src/",
				"tests/"
			]
		},
		{
			"type": "shell",
			"label": "python-format-ruff",
			"detail": "Format python code with black.",
			"group": "test",
			"command": "uv",
			"args": [
				"run",
				"ruff",
				"format",
				"src/",
				"tests/"
			]
		},
		{
			"type": "shell",
			"label": "python-pytest-basic",
			"detail": "Run pytest python tests.",
			"group": "test",
			"command": "uv",
			"args": [
				"run",
				"pytest",
				"-r a"
			]
		},
		{
			"type": "shell",
			"label": "python-pytest-coverage",
			"detail": "Run pytest python tests with coverage report.",
			"group": "test",
			"command": "uv",
			"args": [
				"run",
				"pytest",
				"--cov",
				"-r a"
			]
		},
		{
			"type": "shell",
			"label": "python-mypy",
			"detail": "Run pytest python tests.",
			"group": "test",
			"command": "uv",
			"args": [
				"run",
				"mypy",
				"src/",
				"tests/"
			]
		},
		{
			"type": "shell",
			"label": "python-lint-and-test",
			"detail": "Lint, format and test python code.",
			"dependsOrder": "sequence",
			"dependsOn": [
				"python-lint-ruff",
				"python-format-ruff",
				"python-mypy",
				"python-pytest-coverage",
			]
		},
		{
			"type": "shell",
			"label": "Full Test Suite",
			"detail": "Lint and test python, then build and test docker container.",
			"dependsOrder": "sequence",
			"dependsOn": [
				"python-lint-and-test",
				"docker-run ALL",
			],
			"group": {
				"kind": "test",
				"isDefault": true
			}
		},
		{
			"type": "shell",
			"label": "precommit-uninstall",
			"detail": "Uninstall pre-commit hooks.",
			"group": "none",
			"command": "uv",
			"args": [
				"run",
				"pre-commit",
				"uninstall"
			]
		},
		{
			"type": "shell",
			"label": "precommit-install",
			"detail": "Install pre-commit hooks.",
			"group": "none",
			"command": "uv",
			"args": [
				"run",
				"pre-commit",
				"install"
			]
		},
		{
			"type": "shell",
			"label": "precommit-autoupdate",
			"detail": "Auto-update pre-commit hooks.",
			"group": "none",
			"command": "uv",
			"args": [
				"run",
				"pre-commit",
				"autoupdate"
			]
		},
		{
			"type": "shell",
			"label": "precommit update & install",
			"detail": "Update and reinstall all pre-commmit hooks.",
			"group": "none",
			"dependsOrder": "sequence",
			"dependsOn": [
				"precommit-uninstall",
				"precommit-autoupdate",
				"precommit-install"
			]
		},
		{
			"type": "shell",
			"label": "uv update & lock dependencies",
			"detail": "Update all dependencies and update uv.lock.",
			"group": "none",
			"command": "uv",
			"args": [
				"lock"
			]
		},
	]
}
