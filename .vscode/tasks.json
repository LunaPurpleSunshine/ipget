{
	"version": "2.0.0",
	"tasks": [
		{
			"type": "shell",
			"label": "Generate requirements.txt-production",
			"detail": "Generates requirements.txt with production/deployment requirements ONLY.",
			"group": "build",
			"command": "pipenv",
			"args": [
				"run",
				"pipenv",
				"requirements",
				">",
				"requirements.txt",
			]
		},
		{
			"type": "shell",
			"label": "Generate requirements.txt-development",
			"detail": "Generates development-requirements.txt",
			"group": "build",
			"command": "pipenv",
			"args": [
				"run",
				"pipenv",
				"requirements",
				"--dev",
				">",
				"dev-requirements.txt",
			]
		},
		{
			"label": "docker-build :code",
			"detail": "Builds multi-arch docker container as lunapurplesunshine/ipget:code. Does NOT push.",
			"type": "docker-build",
			"platform": "python",
			"dockerBuild": {
				"platform": "linux/amd64,linux/arm64,linux/arm/v6,linux/arm/v7",
				"dockerfile": "${workspaceFolder}/Dockerfile",
				"context": "${workspaceFolder}",
				"tag": "lunapurplesunshine/ipget:code",
			},
			"group": "build"
		},
		{
			"label": "docker-run :code",
			"detail": "Runs the docker container lunapurplesunshine/ipget:code for local testing in the workspace folder.",
			"type": "docker-run",
			"dockerRun": {
				"image": "lunapurplesunshine/ipget:code",
				"containerName": "ipget-code",
				"remove": true,
				"envFiles": [
					"${workspaceFolder}/test-container/test.env",
				],
				"volumes": [
					{
						"localPath": "${workspaceFolder}/test-container/",
						"containerPath": "/app",
						"permissions": "rw"
					}
				]
			},
			"group": "test"
		},
		{
			"label": "docker-build and run :code",
			"detail": "Calls the docker build and run tasks.",
			"dependsOrder": "sequence",
			"dependsOn": [
				"docker-build :code",
				"docker-run :code"
			],
			"group": "test",
		},
		{
			"type": "shell",
			"label": "python-lint-ruff",
			"detail": "Lint python coder with ruff.",
			"group": "test",
			"command": "pipenv",
			"args": [
				"run",
				"ruff",
				"check",
				"src/",
				"tests/"
			]
		},
		{
			"type": "shell",
			"label": "python-format-black",
			"detail": "Format python code with black.",
			"group": "test",
			"command": "pipenv",
			"args": [
				"run",
				"black",
				"."
			]
		},
		{
			"type": "shell",
			"label": "python-format-isort",
			"detail": "Sort python imports with isort.",
			"group": "test",
			"command": "pipenv",
			"args": [
				"run",
				"isort",
				".",
				"--profile",
				"black"
			]
		},
		{
			"type": "shell",
			"label": "python-pytest-basic",
			"detail": "Run pytest python tests.",
			"group": "test",
			"command": "pipenv",
			"args": [
				"run",
				"pytest",
				"-rxXs"
			]
		},
		{
			"type": "shell",
			"label": "python-pytest-coverage",
			"detail": "Run pytest python tests with coverage report.",
			"group": "test",
			"command": "pipenv",
			"args": [
				"run",
				"pytest",
				"--cov",
				"-rxXs"
			]
		},
		{
			"type": "shell",
			"label": "python-lint-and-test",
			"detail": "Lint, format and test python code.",
			"dependsOrder": "sequence",
			"dependsOn": [
				"python-format-black",
				"python-format-isort",
				"python-lint-ruff",
				"python-pytest-coverage",
			]
		},
		{
			"type": "shell",
			"label": "Full Test Suite",
			"detail": "Lint and test python, then build and test docker container.",
			"dependsOrder": "sequence",
			"dependsOn": [
				"python-lint-and-test",
				"docker-build and run :code",
			],
			"group": {
				"kind": "test",
				"isDefault": true
			}
		},
		{
			"type": "shell",
			"label": "precommit-uninstall",
			"detail": "Uninstall pre-commit hooks.",
			"group": "none",
			"command": "pipenv",
			"args": [
				"run",
				"pre-commit",
				"uninstall"
			]
		},
		{
			"type": "shell",
			"label": "precommit-install",
			"detail": "Install pre-commit hooks.",
			"group": "none",
			"command": "pipenv",
			"args": [
				"run",
				"pre-commit",
				"install"
			]
		},
		{
			"type": "shell",
			"label": "precommit-autoupdate",
			"detail": "Auto-update pre-commit hooks.",
			"group": "none",
			"command": "pipenv",
			"args": [
				"run",
				"pre-commit",
				"autoupdate"
			]
		},
		{
			"type": "shell",
			"label": "precommit update & install",
			"detail": "Update and reinstall all pre-commmit hooks.",
			"group": "none",
			"dependsOrder": "sequence",
			"dependsOn": [
				"precommit-uninstall",
				"precommit-autoupdate",
				"precommit-install"
			]
		},
		{
			"type": "shell",
			"label": "pipenv update dependencies",
			"detail": "Update all pipenv python dependencies.",
			"group": "none",
			"command": "pipenv",
			"args": [
				"run",
				"pipenv",
				"updated",
				"--outdated"
			]
		},
	]
}
